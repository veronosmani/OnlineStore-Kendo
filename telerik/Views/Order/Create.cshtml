@model telerik.Models.OrderViewModel

@{
    ViewData["Title"] = "Place Order";
    var discard = TempData["SuccessMessage"];
}

<style>
    .order-container {
        display: flex;
        gap: 40px;
        margin-top: 30px;
    }

    .product-details {
        flex: 1;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
    }

    .product-image {
        width: 100%;
        height: auto;
    }

    .order-form {
        flex: 1;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 8px;
    }

    .order-title {
        margin-bottom: 20px;
    }

    .product-details img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .form-control {
        margin-top: 10px;
    }

    label {
        font-weight: bold;
    }
    .price {
        display: flex;
        justify-content: end;
        gap: 5px;
        align-items: center;
    }
</style>

<div class="order-container">
    <!-- Left: Product Details -->
    <div class="product-details">
        <h2>@Model.ProductName</h2>
        <p><strong>Price:</strong> @Model.UnitPrice.ToString("C")</p>
        <img src="@Model.ImageUrl" alt="@Model.ProductName" class="product-image" />
    </div>

    <!-- Right: Order Form -->
    <div class="order-form">
        <h3 class="order-title">Place Your Order</h3>

        @if (TempData["ErrorMessage"] != null)
        {
            <div style="color:red; margin-bottom: 10px;">@TempData["ErrorMessage"]</div>
        }

        <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @* Hidden fields *@
            <input type="hidden" asp-for="ProductName" />
            <input type="hidden" asp-for="ProductId" />
            <input type="hidden" asp-for="UnitPrice" />
            <input type="hidden" asp-for="ImageUrl" />

            <div class="form-group">
                <label asp-for="FullName"></label>
                <input asp-for="FullName" class="form-control" />
                <span asp-validation-for="FullName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Address"></label>
                <input asp-for="Address" class="form-control" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Email"></label>
                <input asp-for="Email" class="form-control" type="email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Quantity"></label>
                <input asp-for="Quantity" class="form-control" type="number" min="1" />
                <span asp-validation-for="Quantity" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="PaymentForm"></label>
                <select asp-for="PaymentForm" class="form-control">
                    <option value="">--Select--</option>
                    <option value="Card">Card</option>
                    <option value="Cash">Cash</option>
                </select>
                <span asp-validation-for="PaymentForm" class="text-danger"></span>
            </div>

            <div class="form-group price">
                <label>Total:</label>
                <p id="totalPrice" style="font-weight:bold; margin-bottom: 0;">@Model.UnitPrice.ToString("C")</p>
            </div>

            <button type="submit" class="btn btn-primary w-100">Submit Order</button>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityInput = document.querySelector('input[name="Quantity"]');
            const totalDisplay = document.getElementById('totalPrice');
            const unitPrice = parseFloat("@Model.UnitPrice");

            function updateTotal() {
                const qty = parseInt(quantityInput.value) || 0;
                const total = qty * unitPrice;
                totalDisplay.textContent = total.toLocaleString('en-US', { style: 'currency', currency: 'EUR' });
            }

            quantityInput.addEventListener('input', updateTotal);
            updateTotal();
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
                    @if (TempData["ErrorMessage"] != null)
        {
                <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: '@TempData["ErrorMessage"]',
                        confirmButtonColor: '#dc3545'
                    });
                </text>
        }

        });
    </script>
}